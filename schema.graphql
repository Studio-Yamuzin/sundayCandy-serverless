type Bible {
  PK: ID!
  SK: ID!
  title: String!
  chapter: Int!
  verse: Int!
  isLast: Boolean
  text: String!
}

type Bookmark {
  title: String
  chapter: Int
  date: String
}

input GetBibleByChapterInput {
  title: String!
  chapter: Int!
}

input GetBibleByVerseInput {
  title: String!
  chapter: Int!
  verse: Int!
}

input GetBibleByVerseListInput {
  keys: [String]
}

input CreateBookmarkInput {
  title: String!
  chapter: Int!
}

input DeleteBookmarkInput {
  title: String!
  chapter: Int!
}

input GetMyBookmarkByChapterInput {
  title: String!
  chapter: Int!
}

type Query {
  getBibleByChapter(input: GetBibleByChapterInput!): [Bible]
  getBibleByVerse(input: GetBibleByVerseInput!): Bible
  getBibleByVerseList(input: GetBibleByVerseListInput!): [Bible]
  getMyBookmarks: [Bookmark]
  getMyBookmarkByChapter(input: GetMyBookmarkByChapterInput): Bookmark
  getMyChatRooms: [RoomInfo]
  getMyChatRoomInfo(input: GetMyChatRoomInfoInput): RoomInfo
  getRoomMessages(input: GetRoomMessagesInput): PaginatedMessages
  getRecentMessage(input: GetRecentMessageInput): Message
  getChurch(chuchId: ID!): Church
  getContemplationAll: [Contemplation]
  getContemplations(input: GetContemplationsInput): [Contemplation]
  getContemplation(input: GetContemplationInput): Contemplation
  getMyContemplations: [Contemplation]
  getProfile: Profile
  getChurchUsers: [Profile]
  getUserChurch: UserChurch
  getOnboardingStep: OnboardingStep
}

type Mutation {
  createBookmark(input: CreateBookmarkInput): Bookmark
  deleteBookmark(input: DeleteBookmarkInput): Bookmark
  createGeneralRoom(input: CreateRoomInput): RoomInfo
  sendMessage(roomId: ID!, input: SendMessageInput): Message
  updateRoomSetting(input: UpdateRoomSettingInput): RoomInfo
  exitRoom(input: ExitRoomInput): [RoomInfo]
  createChurch(input: CreateChurchInput): Church
  updateChurch(input: UpdateChurchInput): Church
  createContemplation(input: CreateContemplationInput): Contemplation
  likeContemplation(input: LikeContemplationInput): Contemplation
  deleteContemplation(input: DeleteContemplationInput): Boolean
  updateContemplation(input: UpdateContemplationInput): Contemplation
  writeComment(input: WriteCommentInput): Comment
  likeComment(input: LikeCommentInput): Comment
  deleteComment(input: DeleteCommentInput): Boolean
  writeRecomment(input: WriteRecommentInput): Recomment
  likeRecomment(input: LikeRecommentInput): Recomment
  deleteRecomment(input: DeleteRecommentInput): Boolean
  createProfile(input: CreateUserIput): Profile
  updateProfile(input: UpdateUserInfo): Profile
  verifyCode(input: VerifyCodeInput): Profile
  createCode(input: CreateCodeInput): Code
}

type RoomInfo {
  roomId: ID!
  users: [Profile]
  roomName: String
  roomType: String
  recentMessage: Message
  unReadCount: Int
  photo: String
}

type Message {
  roomId: ID!
  key: ID!
  message: String
  photo: String
  timeStamp: String
  writer: String
  type: String
}

type PaginatedMessages {
  messages: [Message]
  isLast: Boolean
}

input CreateRoomInput {
  users: [String]
  name: String
  photoUri: String
}

input SendMessageInput {
  message: String
  photo: String
}

input GetRecentMessageInput {
  roomId: String!
}

input GetRoomMessagesInput {
  roomId: String!
  key: String
  limit: Int
}

input UpdateRoomSettingInput {
  roomId: String!
  title: String
  photoUri: String
}

input GetMyChatRoomInfoInput {
  roomId: String!
}

input ExitRoomInput {
  roomId: String!
}

type Subscription {
  sentMessage(roomId: ID!): Message @aws_subscribe(mutations: ["sendMessage"])
}

type Church {
  name: String!
  description: String
  address: String!
  phoneNumber: String!
  photo: String
  type: String
}

input CreateChurchInput {
  name: String!
  description: String
  address: String!
  phoneNumber: String!
  photo: String
  type: String
}

input UpdateChurchInput {
  name: String!
  description: String
  address: String!
  phoneNumber: String!
  photo: String
  type: String
}

enum LikeActionType {
  activate
  inactivate
}

type Contemplation {
  id: ID!
  references: [String]
  content: String
  range: String
  writer: Profile
  likers: [String]
  viewers: [String]
  commentCount: Int
  comments: [Comment]
  timeStamp: String
}

type Comment {
  writer: Profile
  text: String
  likers: [String]
  recomments: [Recomment]
  timeStamp: String
}

type Recomment {
  replyProfile: Profile
  writer: Profile
  text: String
  likers: [String]
  timeStamp: String
}

input CreateContemplationInput {
  references: [String]
  content: String!
  range: String!
}

input GetContemplationsInput {
  key: String
  limit: Int
}

input GetContemplationInput {
  id: ID!
  writer: String!
}

input LikeContemplationInput {
  id: ID!
  writer: String!
  type: LikeActionType
}

input DeleteContemplationInput {
  id: ID!
}

input UpdateContemplationInput {
  id: ID!
  text: String
}

input WriteCommentInput {
  contemplationID: ID!
  text: String!
}

input WriteRecommentInput {
  commentID: ID!
  text: String!
  target: String!
}

input LikeCommentInput {
  contemplationID: ID!
  commentID: ID!
}

input LikeRecommentInput {
  commentID: ID!
  recommentID: ID!
}

input DeleteCommentInput {
  contemplationID: ID!
  commentID: ID!
}

input DeleteRecommentInput {
  commentID: ID!
  recommentID: ID!
}

type Profile {
  PK: String
  name: String
  phoneNumber: String
  photo: String
  birthDay: String
  position: String
  church: String!
  level: String
}

type UserChurch {
  name: String
}

type Code {
  id: ID!
  verifyNumber: String!
  level: String!
  createdAt: String!
}

input CreateUserIput {
  name: String
  phoneNumber: String
  birthDay: String
  photo: String
  position: String
  church: String
}

input UpdateUserInfo {
  name: String
  phoneNumber: String
  photo: String
  position: String
}

input GetProfilesInput {
  users: [String]
}

input VerifyCodeInput {
  verifyNumber: Int
}

input CreateCodeInput {
  level: String
}

type OnboardingStep {
  step: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
