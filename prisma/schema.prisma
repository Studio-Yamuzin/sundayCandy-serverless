generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "darwin"]
}

// darwin for localhost test

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RangeType {
  public
  private
}

enum BoardAccessibilityType {
  communityAdmin
  user
}

enum LevelType {
  admin
  user
}

enum ChatRoomType {
  community
  general
}

enum BoardPresetType {
  list
  card
  weeklyInfo // 주보
}

enum AdminLogType {
  adminRegist
  adminCancel
  communityAdminRegist
  communityAdminCancel
  userResign
  userForceResign
  deleteContemplation
  deletePost
  deleteComment
}

enum CommunityType {
  home
  community
}

model Church {
  id                 String               @id @default(cuid())
  name               String               @db.VarChar(20)
  imageUri           String?
  type               String               @db.VarChar(30)
  description        String?              @db.VarChar(100)
  address            String               @db.VarChar(30)
  phoneNumber        String?              @db.VarChar(10)
  createdAt          DateTime             @default(now())
  isConfirmed        Boolean              @default(false)
  authenticationCode AuthenticationCode[]
  contemplations     Contemplation[]
  users              User[]
  community          Community[]
  adminLog           AdminLog[]
}

model AuthenticationCode {
  id           String   @id @default(cuid())
  maker        User     @relation(fields: [makerId], references: [id])
  verifyNumber String   @db.VarChar(6)
  churchId     String
  createdAt    DateTime @default(now())
  church       Church   @relation(fields: [churchId], references: [id])
  makerId      String

  @@index([churchId], map: "AuthenticationCode_churchId_fkey")
}

model User {
  id          String     @id
  name        String?    @db.VarChar(20)
  updatedAt   DateTime   @default(now()) @updatedAt
  createdAt   DateTime   @default(now())
  churchId    String
  level       LevelType?
  pushToken   String?
  position    String?
  phoneNumber String?    @db.VarChar(20)
  birthDay    String?
  photo       String?
  church      Church     @relation(fields: [churchId], references: [id])
  bookmark    Bookmark[]

  comment         Comment[]
  communityStatus CommunityStatus[]
  Contemplation   Contemplation[]
  like            Like[]

  representCommunityId String?    @unique // 대표 게시판 설정
  representCommunity   Community? @relation(fields: [representCommunityId], references: [id])

  authenticationCodes AuthenticationCode[]
  adminLogs           AdminLog[]
  @@index([churchId], map: "User_churchId_fkey")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  chapter   Int
  title     String   @db.VarChar(20)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Bookmark_userId_fkey")
}

model CommunityStatus {
  id          String    @id @default(cuid())
  communityId String
  userId      String
  admin       Boolean   @default(false)
  createdAt   DateTime  @default(now())
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([communityId], map: "CommunityStatus_communityId_fkey")
  @@index([userId], map: "CommunityStatus_userId_fkey")
}

model ContemplationReference {
  id              String         @id @default(cuid())
  key             String
  contemplationId String?
  contemplation   Contemplation? @relation(fields: [contemplationId], references: [id])

  @@index([contemplationId], map: "ContemplationReference_contemplationId_fkey")
}

model Contemplation {
  id          String                   @id @default(cuid())
  writerId    String
  createdAt   DateTime                 @default(now())
  content     String                   @db.VarChar(200)
  range       RangeType
  viewerCount Int                      @default(0)
  churchId    String?
  church      Church?                  @relation(fields: [churchId], references: [id])
  writer      User                     @relation(fields: [writerId], references: [id])
  comments    Comment[]
  references  ContemplationReference[]
  likes       Like[]

  @@index([churchId], map: "Contemplation_churchId_fkey")
  @@index([writerId], map: "Contemplation_writerId_fkey")
}

model Comment {
  id              String         @id @default(cuid())
  text            String
  writerId        String
  contemplationId String?
  postId          String?
  createdAt       DateTime       @default(now())
  parentId        String?
  contemplation   Contemplation? @relation(fields: [contemplationId], references: [id])
  parent          Comment?       @relation("Recomment", fields: [parentId], references: [id])
  post            Post?          @relation(fields: [postId], references: [id])
  writer          User           @relation(fields: [writerId], references: [id])
  recomments      Comment[]      @relation("Recomment")
  likes           Like[]

  @@index([contemplationId], map: "Comment_contemplationId_fkey")
  @@index([parentId], map: "Comment_parentId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
  @@index([writerId], map: "Comment_writerId_fkey")
}

model Like {
  id              String         @id @default(cuid())
  userId          String
  postId          String?
  commentId       String?
  createdAt       DateTime       @default(now())
  contemplationId String?
  post            Post?          @relation(fields: [postId], references: [id])
  comment         Comment?       @relation(fields: [commentId], references: [id])
  contemplation   Contemplation? @relation(fields: [contemplationId], references: [id])
  user            User           @relation(fields: [userId], references: [id])

  @@index([postId], map: "Like_postId_fkey")
  @@index([commentId], map: "Like_commentId_fkey")
  @@index([contemplationId], map: "Like_contemplationId_fkey")
  @@index([userId], map: "Like_userId_fkey")
}

model Community {
  id                String             @id @default(cuid())
  churchId          String
  name              String
  photo             String?
  createdAt         DateTime           @default(now())
  boards            Board[]
  communityStatus   CommunityStatus[]
  communityType     CommunityType
  church            Church             @relation(fields: [churchId], references: [id])
  user              User[]
  representiveBoard RepresentiveBoard?
}

model Board {
  id                String             @id @default(cuid())
  order             Int
  name              String
  communityId       String
  createdAt         DateTime           @default(now())
  boardPreset       BoardPresetType
  authority         LevelType
  community         Community          @relation(fields: [communityId], references: [id])
  posts             Post[]
  representiveBoard RepresentiveBoard?

  @@index([communityId], map: "Board_communityId_fkey")
}

model RepresentiveBoard {
  id          String    @id @default(cuid())
  boardId     String    @unique
  board       Board     @relation(fields: [boardId], references: [id])
  communityId String    @unique
  community   Community @relation(fields: [communityId], references: [id])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  boardId   String
  createdAt DateTime  @default(now())
  board     Board     @relation(fields: [boardId], references: [id])
  comment   Comment[]
  photo     Photo[]

  like Like[]
  @@index([boardId], map: "Post_boardId_fkey")
}

model Photo {
  id        String   @id @default(cuid())
  postId    String?
  uri       String
  createdAt DateTime @default(now())
  post      Post?    @relation(fields: [postId], references: [id])
}

model AdminLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  churchId  String
  church    Church   @relation(fields: [churchId], references: [id])
  log       String
}
