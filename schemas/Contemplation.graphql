enum LikeType {
  board
  contemplation
  comment
}

enum RangeType {
  public
  private
}

type Contemplation {
  id: ID!
  references: [String]
  content: String
  range: RangeType
  writer: Profile
  likers: [String]
  viewerCount: Int
  commentCount: Int
  comments: [Comment]
  timeStamp: String
}

type Comment {
  id: ID!
  writer: Profile
  text: String
  likers: [String]
  recomments: [Comment]
  timeStamp: String
}

input CreateContemplationInput {
  references: [String]
  content: String!
  range: RangeType!
}

input GetContemplationsInput {
  key: String
  limit: Int
}

input GetContemplationInput {
  id: ID!
}

input LikeContemplationInput {
  id: ID! # contemplation
}

input DeleteContemplationInput {
  id: ID!
}

input UpdateContemplationInput {
  id: ID!
  text: String
}

input WriteCommentInput {
  contemplationID: ID!
  text: String!
}

input WriteRecommentInput {
  commentId: ID!
  text: String!
}

input LikeCommentInput {
  id: ID!
}

input DeleteCommentInput {
  id: ID!
}

input DeleteLikeInput {
  id: ID!
}

input ContemplationCommentsInput {
  id: ID! # contemplation id
}

input UpdateContemplationViewerInput {
  id: ID! #contemplation id
}

type Query {
  contemplations(input: GetContemplationsInput): [Contemplation]
  contemplation(input: GetContemplationInput): Contemplation # 상세조회, comment & recomments 모두 포함된 데이터.
  myContemplations: [Contemplation]
  contemplationComments(input: ContemplationCommentsInput): [Comment]
}

type Mutation {
  createContemplation(input: CreateContemplationInput): Contemplation
  likeContemplation(input: LikeContemplationInput): [String]
  deleteContemplation(input: DeleteContemplationInput): Contemplation
  updateContemplation(input: UpdateContemplationInput): Contemplation
  writeComment(input: WriteCommentInput): Comment
  likeComment(input: LikeCommentInput): [String]
  deleteComment(input: DeleteCommentInput): Boolean
  writeRecomment(input: WriteRecommentInput): Comment
  updateContemplationViewer(input: UpdateContemplationViewerInput): Int 
}
