# NOTE: update this with your service name
service: sundaycandy-serverless

# Create an optimized package for our functions
package:
  excludeDevDependencies: true
  include:
    - node_modules/**

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-2
  environment:
    devCognitoUserPoolId: ap-northeast-2_eOsy1c65x
    tableName: ${env:TABLE_NAME}
    authTableName: ${env:AUTH_TABLE_NAME}
    bibleTableName: ${env:BIBLE_TABLE_NAME}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminGetUser
        - cognito-idp:ListUsers
        - lambda:InvokeFunction
      Resource:
        - "arn:aws:cognito-idp:ap-northeast-2:674304001403:userpool/*"
        - "arn:aws:dynamodb:ap-northeast-2:*:*"
        - "arn:aws:lambda:ap-northeast-2:674304001403:function:*"
custom:
  stage: dev
  accountId: 674304001403
  sundayCandyTableArn: "arn:aws:dynamodb:ap-northeast-2:${self:custom.accountId}:table/sundayCandy"
  bundle:
    linting: false # Enable linting as a part of the build process
    tsConfig: "tsconfig.json" # Path to your 'tsconfig.json', if it's not in the root
    aliases: # Create an alias to 'import' modules easily with a custom path
      - src: src
    packager: yarn
  appSync:
    serviceRole: "${self:custom.stage}-sundayCandy-AppSyncServiceRole"
    authenticationType: AWS_IAM
    userPoolConfig:
      awsRegion: ap-northeast-2
      defaultAction: ALLOW
      userPoolId: ap-northeast-2_eOsy1c65x
      existing: true
    name: sundayCandy-graphql
    schema:
      - schemas/User.graphql
      - schemas/Church.graphql
      - schemas/Bible.graphql
      - schemas/Contemplation.graphql
      - schemas/Chat.graphql
    mappingTemplates: ${file(resources/mappingTemplates.yml):Templates}
    dataSources:
      - type: AMAZON_DYNAMODB
        name: sundayCandy
        description: "sundayCandy Table"
        config:
          tableName: sundayCandy
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "dynamodb:GetItem"
              Resource:
                - "${self:custom.sundayCandyTableArn}"
                - "${self:custom.sundayCandyTableArn}/*"
      - type: AWS_LAMBDA
        name: Lambda
        description: "sundayCandy lambda function dataSource"
        config:
          functionName: graphql
          lambdaFunctionArn: "arn:aws:lambda:ap-northeast-2:${self:custom.accountId}:function:sundaycandy-serverless-${self:custom.stage}-graphql"
          iamRoleStatements: # custom IAM Role statements for this DataSource. Ignored if `serviceRoleArn` is present. Auto-generated if both `serviceRoleArn` and `iamRoleStatements` are omitted
            - Effect: "Allow"
              Action:
                - "lambda:invokeFunction"
                - "appsync:*"
              Resource:
                - "arn:aws:lambda:ap-northeast-2:${self:custom.accountId}:function:sundaycandy-serverless-${self:custom.stage}-graphql"
                - "arn:aws:lambda:ap-northeast-2:${self:custom.accountId}:function:sundaycandy-serverless-${self:custom.stage}-graphql:*"
functions:
  kakao:
    handler: src/auth/kakaoSignUp.main
    events:
      - http:
          path: kakao/signUp
          method: post
  preSignUp:
    handler: src/auth/preSignUp.main
    events:
      - http:
          path: preSignUp
          method: post
  preKakaoAuthentication:
    handler: src/auth/preKakaoAuthentication.main
    events:
      - http:
          path: preKakaoAuthentication
          method: post
  graphql:
    handler: handlers/graphqlHandler.main
    timeout: 900
    stage:
      - ${self:custom.stage}
